*****************************

# For PostgreSQL add the dependency

<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
</dependency>

Add the DataSourceConfig class to use PostgreSQL
Add lines to application.properties

# Which db to run
local.run.db=H2
# local.run.db=POSTGRESQL

*****************************

To use PostgreSQL locally

Add @PropertySource("file:/Users/lambdajohn/stumpsconfig.properties") to StumpsApplication

Create a file called /Users/lambdajohn/stumpsconfig.properties with the following line:

SPRING.DATASOURCE.URL=jdbc:postgresql://localhost:5432/stumpsdb?password=password&sslmode=prefer&user=postgres

When using @Value - The Hierarchy of where the values are found
    OS environment variables.
    Application properties packaged inside your jar (application.properties including YAML and profile variants).
    @PropertySource annotation on your Main Class

*****************************

# Setup Heroku

heroku login
heroku create jrmmba-stumps
heroku addons:create heroku-postgresql:hobby-dev -a jrmmba-stumps
heroku config -a jrmmba-stumps

heroku config:set OAUTHCLIENTID=lambda-client -a jrmmba-stumps
heroku config:set OAUTHCLIENTSECRET=lambda-secret -a jrmmba-stumps

Use the heroku GUI to access log

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Now In Java

# Add the plugin for heroku

<finalName>jrmmba-stumps</finalName>

<!-- Heroku Maven Plugin Configuration -->
<plugin>
    <groupId>com.heroku.sdk</groupId>
    <artifactId>heroku-maven-plugin</artifactId>
    <version>3.0.2</version>
    <configuration>
        <appName>${project.build.finalName}</appName>
        <includeTarget>false</includeTarget>
        <includes>
            <include>${project.build.directory}/${project.build.finalName}.jar</include>
        </includes>
        <jdkVersion>${java.version}</jdkVersion>
        <processTypes>
            <web>java $JAVA_OPTS -Dserver.port=$PORT -jar target/${project.build.finalName}.jar</web>
        </processTypes>
    </configuration>
</plugin>

# Environment Variables Needed for OAuth2 Authentication Server
# OAUTHCLIENTID
# OAUTHCLIENTSECRET

# Find heroku info
heroku config -a jrmmba-foundation

Add SimpleCorsFilter.java to handle deploying and CORS issues

In application.properties add spring.h2.console.settings.web-allow-others=true

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To deploy, go to

Maven Tab
Turn on Skip Testing
Maven Goals
mvn clean heroku:deploy -X

****************************

Connect H2 Console to Heroku Postgres 

jdbc:postgresql://ec2-52-4-177-4.compute-1.amazonaws.com/d3bgb040dnfiod

On Heroku
Find data from Heroku Config Var for DATABASE_URL. For example

postgres://username      :password                                                        @hostname                               :5432/database name
postgres://ixewvznjaizqhw:594d518194085938e11dc6864fbe86d78a459917d205f1df07719dadbc6d684c@ec2-54-90-13-87.compute-1.amazonaws.com:5432/daiqbmjh2rj17h

H2Console - http://jrmmba-restaurant.herokuapp.com/h2-console

Following this example fill in the fields on the h2console

Saved Settings: Generic PostgreSQL
Setting Name:   Generic PostgreSQL

Driver Class: org.postgresql.Driver
JDBC URL:  jdbc:postgresql://ec2-54-90-13-87.compute-1.amazonaws.com/daiqbmjh2rj17h
User Name: ixewvznjaizqhw
Password:  594d518194085938e11dc6864fbe86d78a459917d205f1df07719dadbc6d684c


On Local (application must be running due to needing to access the h2-console!)

H2Console - http://localhost:2019/h2-console

Assuming you are using the standard postgres user with a password of password and database name of restaurantdb

Saved Settings: Generic PostgreSQL
Setting Name:   Generic PostgreSQL

Driver Class: org.postgresql.Driver
JDBC URL:   jdbc:postgresql://localhost:5432/stumpsdb
User Name:  postgres
Password:   password

****************************

GitHub Heroku Deploy Manually

Fork, Clone
Make Own Branch: git checkout -b john-mitchell
Push Branch to GitHub: git push origin john-mitchell


Set up your Heroku applications
Add system.properties file to the same folder as POM.XML file

From your copy of the repo! Remember though you are deploying from GitHub to Heroku. Code on GitHub must be current (not just your local copy)

heroku login
heroku git:remote -a jrmmba-restaurant
git subtree push --prefix secured-restaurants-deployed heroku main

****************************

GitHub Heroku Autodeploy

see: https://stackoverflow.com/questions/39197334/automated-heroku-deploy-from-subfolder

Under Deploy GitHub select repository (must have admin rights to repo)

Create a config var PROJECT_PATH = secured-restaurants-deployed

Under Settings BuildPack add https://github.com/timanovsky/subdir-heroku-buildpack.git. Move it to the top buildpack
    You may wish to fork the subdir-heroku-buildpack to your own repositories

Back under Deploy GitHub - pick the branch you want to deploy and enable automatic deploys

****************************

Problem:

Heroku restarts your application once every 24 hours. It does this automatically; you have no control over it. This is a good thing and is similar to my mantra of restart your computer at least once a day!

However, if you leave your code as originally deployed (with creating the database turned on seeddata active), when Heroku restarts your application, any data changes made in the last 24 hours get wiped out. So much for presient data.

Solution (beta):

Here is a solution.

Deploy your application as normal using postgresql

When you first deploy your application, in application.properties, you have the following set

spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always

And you may have a SeedData class.

Make sure your application is running properly.

Now add the following config vars to your Heroku app

in application.properties

Config Var                              Value
spring_jpa_hibernate_ddl-auto           update
spring_datasource_initialization-mode   never
command_line_runner_enabled             false

So, now when your application is restarted by Heroku, the values will be read from the config vars overriding what is in application.properties and so seed data is not active and you can keep your old data!
